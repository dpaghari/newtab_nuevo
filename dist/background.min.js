/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/background.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/background.js":
/*!**************************!*\
  !*** ./js/background.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports) {

/**
 * Facilitates the overall control flow of the extension
 */

class NewtabNuevo {
	constructor() {
		this.StorageObjects = null;
	}

	// Get a setting from localstorage
	// Setting name, default value if not found
	getSetting(name, defVal) {
		if (typeof this.StorageObjects.get(name) !== "undefined") {
			return this.StorageObjects.get(name);
		} else {
			if (typeof defVal === "undefined") return "";else return defVal;
		}
	}
	// Save a setting to localstorage
	// Setting name, value for setting could be an array, object, etc.
	setSetting(name, val) {
		this.StorageObjects.set(name, val);
		var setting = {};
		setting[name] = val;
		chrome.storage.local.set(setting);
	}

	// What to do when the extension starts
	startup() {
		var firstRun = this.getSetting("FirstRun", true);
		if (firstRun) {
			this.setSetting("FirstRun", false);
			this.openTab();
		}
	}
	// Retrieve all settings from localstorage and map them to session StorageObjects
	loadSettings() {
		var p = new Promise(resolve => {
			chrome.storage.local.get(function (storedItems) {
				window.NTInstance.StorageObjects = new Map();
				for (var key in storedItems) {
					window.NTInstance.StorageObjects.set(key, storedItems[key]);
				}
				resolve(true);
			});
		});

		return p;
	}

	// Open a new tab
	openTab() {
		// chrome.tabs.create({url: tabURL});
		chrome.tabs.create({ url: "" });
	}

}

var NTInstance = new NewtabNuevo();
window.NTInstance = NTInstance;
const settingsLoaded = NTInstance.loadSettings();

chrome.runtime.onStartup.addListener(function () {
	settingsLoaded.then(response => {
		if (response) NTInstance.startup();
	});
});
chrome.runtime.onInstalled.addListener(function () {
	chrome.tabs.create({ url: chrome.extension.getURL("newtab/newtab.html") });
});
chrome.tabs.onCreated.addListener(function created(tab) {
	if (tab.url == "chrome://newtab/") {
		chrome.tabs.update(tab.id, { url: chrome.extension.getURL("newtab/newtab.html") });
	}
});

// Messaging Event Listeners
chrome.runtime.onMessage.addListener(function (req, sender, sendResponse) {
	var res = {};
	switch (req.task) {
		case "checkFirstRun":
			var firstRun = NTInstance.getSetting("FirstRun", true);
			res.firstRun = firstRun;
			if (firstRun) {
				sendResponse(res);
				NTInstance.setSetting("FirstRun", false);
			}
			sendResponse(res);
			break;

		default:
			break;

	}
});

// Open a new tab when you click on extension icon
chrome.browserAction.onClicked.addListener(function () {
	NTInstance.openTab();
});

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,