!function(e){function t(a){if(o[a])return o[a].exports;var n=o[a]={i:a,l:!1,exports:{}};return e[a].call(n.exports,n,n.exports,t),n.l=!0,n.exports}var o={};t.m=e,t.c=o,t.i=function(e){return e},t.d=function(e,o,a){t.o(e,o)||Object.defineProperty(e,o,{configurable:!1,enumerable:!0,get:a})},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=12)}([function(e,t,o){"use strict";function a(e,t){if(e.length!==t.length)return!1;for(var o=0;o<e.length;o++)if(-1===t.indexOf(e[o]))return!1;return!0}function n(e){return $.ajax(e)}function r(){return(new Date).toLocaleTimeString(navigator.language,{hour:"2-digit",minute:"2-digit"}).toLowerCase()}function i(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{domain:"",name:""};if(""!==e.domain||""!==e.name){return new Promise(function(t,o){if("chrome"===d())chrome.cookies.getAll(e,function(e){if(e.length>0&&void 0!==e[0].value){var o=JSON.stringify([e[0].value]);t(o)}else t("")});else{for(var a,n=e.name+"=",r=document.cookie.split(";"),i=0;i<r.length;i++){for(var s=r[i];" "==s.charAt(0);)s=s.substring(1);0==s.indexOf(n)&&(a=s.substring(n.length,s.length),t(a))}a="",t(a)}})}}function s(e){var t=RegExp("[?&]"+e+"=([^&]*)").exec(window.location.search);if(null!==t&&void 0!==t[1])return decodeURIComponent(t[1].replace(/\+/g," "))}function d(){var e=window.navigator.userAgent||"";return e.indexOf("Chrome")>-1?-1==e.indexOf("Edge")?"chrome":"other":e.indexOf("Firefox")>-1?"firefox":e.indexOf("MSIE 8.0")>-1?"ie8":"other"}function l(e,t){var o,a,n=d();"chrome"===n&&void 0!==chrome.extension.getBackgroundPage()?(o=chrome.extension.getBackgroundPage(),void 0!==o.NTInstance&&(a=o.NTInstance,a.setSetting(e,t))):localStorage.setItem(e,t)}function c(e,t){var o,a,n,r=d();return"chrome"===r&&void 0!==chrome.extension.getBackgroundPage()?(o=chrome.extension.getBackgroundPage(),void 0!==o.NTInstance&&(a=o.NTInstance,n=a.getSetting(e,t))):null===(n=localStorage.getItem(e))&&(n=t),n}function f(e,t){var o="jsonp_callback_"+Math.round(1e5*Math.random());window[o]=function(e){delete window[o],document.head.removeChild(a),t(e)};var a=document.createElement("script");a.src=e+(e.indexOf("?")>=0?"&":"?")+"callback="+o,document.head.appendChild(a)}function p(e){return null!==e.match(/(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \&\.\-]*)*\/?/)}function u(e){if(null===e.match(/^(https?:\/\/)/)){return"http://".concat(e)}return e}e.exports={getCookie:i,compareLists:a,getPromise:n,getCurrentTime:r,getParameterByName:s,getBrowser:d,getBrowserSetting:c,setBrowserSetting:l,jsonp:f,validateURL:p,addHttp:u}},function(e,t,o){"use strict";function a(e){var t=e.getSetting("userTheme","fade"),o=e.getSetting("userFont","Montserrat"),a=e.getSetting("userHover","hoverPop"),n=e.getSetting("userThemeBG",null),r=e.getSetting("userFaveSize","80"),i=e.getSetting("userBGStyle","repeat");e.currentSettings={theme:t,font:o,hover:a,background:n,faveSize:r,bgStyle:i}}function n(e){e.faveSize,parseInt(e.faveSize);l.setTheme(e.theme),"cover"===e.bgStyle?$("body").css("background-size",e.bgStyle):($("body").css("background-repeat",e.bgStyle),$("body").css("background-size","auto")),$("*").not("i, h3, label").css("font-family",e.font);var t=$("input[name=theme-select]");$(t).each(function(t,o){$(o).val()===e.theme&&$(o).attr("checked","checked")}),null!==e.background&&($("body").css("background-image","url("+e.background+")"),$("input[name=themeBGImage]").val(e.background)),$(".themeBGImageRepeat").val(e.bgStyle),$(".favoriteSize").val(e.faveSize),$("select.fontOption").val(e.font),$("select.hoverOption").val(e.hover)}function r(e,t){var o=e;t.setSetting("userFont",o),console.log(o),$("*").not("i, .settingsBtn, .removeBtn, .addBtn, .clearBtn").css("font-family",o)}function i(e,t){switch(t.setSetting("userHover",e),e){case"hoverPop":$(".favorite").addClass("hoverPop").removeClass("hoverNone hoverHighlight");break;case"hoverHighlight":$(".favorite").addClass("hoverHighlight").removeClass("hoverNone hoverPop");break;case"hoverNone":$(".favorite").addClass("hoverNone").removeClass("hoverPop hoverHighlight")}}function s(e,t){t.setSetting("userFaveSize",e);var o=e+"px "+(parseInt(e)+40)+"px";$(".favorite").css({padding:o,transition:"0.4s padding, 0.3s transform, 0.3s margin"})}function d(e,t){t.setSetting("userBGStyle",e),"cover"===e?$("body").css("background-size",e):($("body").css("background-repeat",e),$("body").css("background-size","auto"))}var l=o(2);e.exports={loadUserSettings:a,setUserSettings:n,setFont:r,setHover:i,setSize:s,setBGStyle:d}},function(e,t,o){"use strict";function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var n=function(){function e(e,t){for(var o=0;o<t.length;o++){var a=t[o];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,o,a){return o&&e(t.prototype,o),a&&e(t,a),t}}(),r=o(0),i=function(){function e(){a(this,e),this.currentTheme="fade"}return n(e,[{key:"init",value:function(){this.loadTheme()}},{key:"getTheme",value:function(){return this.currentTheme}},{key:"setTheme",value:function(e){switch(e){case"fade":this.setFadeTheme();break;case"light":this.setLightTheme();break;case"dark":this.setDarkTheme();break;default:this.setFadeTheme()}}},{key:"setFadeTheme",value:function(){$("body").addClass("theme-fade").removeClass("theme-light theme-dark")}},{key:"setLightTheme",value:function(){$("body").addClass("theme-light").removeClass("theme-fade theme-dark")}},{key:"setDarkTheme",value:function(){$("body").addClass("theme-dark").removeClass("theme-light theme-fade")}},{key:"saveTheme",value:function(e){r.setBrowserSetting("currentTheme",e)}},{key:"loadTheme",value:function(){var e=r.getBrowserSetting("currentTheme","fade");this.setTheme(e)}}]),e}(),s=new i;e.exports=s},function(e,t,o){"use strict";function a(e){$(".lightbox").fadeIn(),e.css({right:"0px"})}function n(e){$(".lightbox").fadeOut(),e.css({right:"-425px"})}var r=chrome.extension.getBackgroundPage(),i=r.NTInstance;i.editing=!1,i.currentSettings={theme:"light",font:"Montserrat",hover:"hoverPop",background:null,faveSize:"60"};var s=o(1),d=o(6),l=o(5),c=o(0),f=o(7),p=o(2);$(document).ready(function(){s.loadUserSettings(i),l.loadSavedFavorites(i),l.loadPopularFavorites(i),s.setUserSettings(i.currentSettings);var e=d.theCalendar;$(".calendar-head").html("<span>"+d.month_name[d.month]+" "+d.year+"</span"),$(".calendar").append(e),$("#favorites").sortable(),$("#favorites").sortable("disable"),chrome.runtime.sendMessage({task:"checkFirstRun"},function(e){if(e.firstRun)l.loadDefaultFavorites(i),a($(".addModal")),$("#obInputTitle").focus();else{var t=$(".todos");f.getSavedTodos().forEach(function(e){f.addNewTodoToDOM(e,t)});i.getSetting("hidePopFaves",!1)&&$(".popularFavs, .addExtra, .hidePopFaves").hide()}$(".favorite").children().hide()});var t=(new Date).toLocaleTimeString(navigator.language,{hour:"2-digit",minute:"2-digit"});$("#time").html(t);var o=(new Date).toDateString();$("#date").html(o),setInterval(function(){t=(new Date).toLocaleTimeString(navigator.language,{hour:"2-digit",minute:"2-digit"}),$("#time").html(t)},1e3),$(document).on("click",".userAction",function(e){switch(e.preventDefault(),$(this).attr("id")){case"addFavorite":e.preventDefault(),0===$(".addModal .popularFavs").children().length&&$(".addExtra").hide(),a($(".addModal")),$("#inputTitle").focus();break;case"editMode":if(e.preventDefault(),$(".favorite").toggleClass("editing"),$(".favorite").children().toggle(),i.editing){$("#favorites").sortable("disable");var t=[].slice.call($(".favorite"),0),o=[];t.forEach(function(e){var t=e.dataset,a=t.title,n=t.bgImg,r={title:a,url:e.href,bgImg:n};o.push(r)}),i.setSetting("savedFavorites",o)}else $("#favorites").sortable("enable");i.editing=!i.editing;break;case"openSettings":e.preventDefault(),a($(".settingsModal"));break;case"openCalendar":e.preventDefault(),a($(".calendarModal"));break;case"openTodos":e.preventDefault(),a($(".todosModal"))}}),$(document).on("click",".popFav",function(e){e.preventDefault();var t=$(this)[0],o=t.dataset.title,a=t.dataset.url,n=t.dataset.imgurl,r={title:o,url:a,bgImg:n};l.saveFavorite(r,i),$(this).remove();var s=$(".popularFavs").children(),d=[].slice.call(s,0),c=d.filter(function(e){return $(e).data("url")===a});$(c).hide(),0===$(".addModal .popularFavs").children().length&&(i.setSetting("hidePopFaves",!0),$(".addExtra, .popularFavs, .hidePopFaves").hide())}),$(document).on("click",".closeBtn",function(e){e.preventDefault(),n($(this).closest(".modal"))}),$(document).on("click",".addBtn",function(e){e.preventDefault();var t=$("#inputTitle").val(),o=$("#inputUrl").val();o=c.addHttp(o);var a=c.validateURL(o);a||($(".addFormError").css("color","red"),$(".addFormError").text("Please enter a valid URL").show());var r=$("#inputImage").val();r=c.addHttp(r);var s=c.validateURL(r);if(s||$(".addFormError").text("Please enter a valid Image URL").show(),a||s||$(".addFormError").text("Please enter a valid URL & Image URL").show(),""!==t&&""!==o&&a&&""!==r&&s){var d={title:t,url:o,bgImg:r};l.saveFavorite(d,i),null!==$(".modal").length&&n($(".modal")),$(".addFormError").hide(),$(".addFavForm input").val("")}else $(".addFormError").show()}),$(document).on("click",".updateBtn",function(){var e=$("input[name=themeBGImage]").val();c.validateURL(e)?(i.setSetting("userThemeBG",e),$("body").css("background-image","url('"+e+"')")):$(".bgURLError").show()}),$(document).on("click",".removeBtn",function(){$("input[name=themeBGImage]").val(""),i.setSetting("userThemeBG",null),$("body").css("background-image","none"),$(".bgURLError").hide()}),$("input[type=radio][name=theme-select]").change(function(){i.setSetting("userTheme",this.value),p.setTheme(this.value)}),$(document).on("change",".hoverOption",function(){var e=$(this).val();s.setHover(e,i)}),$(document).on("change",".fontOption",function(){var e=$(this).val();s.setFont(e,i)}),$(document).on("change",".favoriteSize",function(){var e=$(this).val();s.setSize(e,i)}),$(document).on("change",".themeBGImageRepeat",function(){var e=$(this).val();s.setBGStyle(e,i)}),$(document).on("click",".optDel",function(e){e.preventDefault();var t=$(this).parent().attr("href");l.deleteFavorite(t,i),$(this).parent().remove()}),$(document).on("click",".favorite",function(e){$(this).hasClass("editing")&&e.preventDefault()}),$(".todoForm").on("submit",function(e){e.preventDefault();var t=$(".todos"),o=$(".newTodo").val();f.addNewTodoToDOM({item:o,isDone:!1},t),f.saveTodo(o),$(".newTodo").val("")}),$(document).on("click",".addTodo",function(){$(".todoForm").submit()}),$(document).on("click",".todoItem",function(){$(this).toggleClass("complete");var e=$(this).find("input[type='checkbox']");$(this).hasClass("complete")?e.prop("checked",!0):e.prop("checked",!1),f.saveTodoList()}),$(document).on("click",".hidePopFaves",function(){i.setSetting("hidePopFaves",!0),$(".popularFavs, .addExtra, .hidePopFaves").hide()}),$(document).on("click",".clearBtn",function(){f.clearAllTodos()}),$(document).on("click",".delTodo",function(){$(this).parent().remove(),f.saveTodoList()})})},function(e,t,o){var a=o(8);"string"==typeof a&&(a=[[e.i,a,""]]);var n,r={};r.transform=n;o(10)(a,r);a.locals&&(e.exports=a.locals)},function(e,t,o){"use strict";function a(e,t,o,a){var n=document.createElement("LI"),r=document.createElement("A");r.href=t,$.get(o).done(function(){r.style.backgroundImage="url("+o+")"}).fail(function(){r.style.backgroundImage="url('/newtab/images/placeholder.png')"}),r.style.backgroundSize="cover",r.style.backgroundPosition="center center",r.style.backgroundRepeat="no-repeat",r.classList.add("favorite",a.currentSettings.hover),r.dataset.title=e,r.dataset.bgImg=o;var i=document.createElement("I");i.classList.add("fa","fa-trash-o","fa-lg","fa-fw","optDel"),r.appendChild(i),n.appendChild(r),$("#favorites").append(n);var s=a.getSetting("userFaveSize","60");u.setSize(s,a),$(".favorite").children().hide()}function n(e,t){var o=[],n=t.getSetting("savedFavorites",null);null!==n&&(o=n),o.push(e),t.setSetting("savedFavorites",o),a(e.title,e.url,e.bgImg,t),$("#inputUrl").val(""),$("#inputImage").val("")}function r(){return $.ajax({url:"./popularFavs.json",method:"GET"})}function i(e,t){var o=t.getSetting("savedFavorites",null);if(null!==o){var a=o.filter(function(t){if(t.url!==e)return!0});t.setSetting("savedFavorites",a)}}function s(e){var t=[],o=e.getSetting("savedFavorites",null);null!==o&&(t=o,t.forEach(function(t){a(t.title,t.url,t.bgImg,e)}))}function d(e){r().then(function(t){f(JSON.parse(t),e)})}function l(e){p.getPromise("/newtab/defaultFavs.json").then(function(t){c(JSON.parse(t),e)})}function c(e,t){for(var o=e.default_favorites,a=0;a<o.length;a++){n({title:o[a].title,url:o[a].url,bgImg:o[a].bgImg},t)}}function f(e,t){for(var o,a=e.popular_favorites,n=t.getSetting("savedFavorites",null),r=0;r<a.length;r++)if(null!==n&&(o=n.find(function(e){return e.url===a[r].url})),void 0===o){var i="<a href='#' class='popFav' data-title="+a[r].title+" data-url="+a[r].url+" data-imgurl="+a[r].bgImg+">"+a[r].title+"</a>";$(".popularFavs").append(i)}$(".popularFavs").after('<a href="#" class="hidePopFaves">Never Show Again</a>')}var p=o(0),u=o(1);e.exports={addFavorite:a,saveFavorite:n,getPopularFavorites:r,deleteFavorite:i,loadSavedFavorites:s,loadPopularFavorites:d,loadDefaultFavorites:l,createDefaultFavs:c,createPopularFavs:f}},function(e,t,o){"use strict";function a(){for(var e=0;e<7;e++){var t=document.createElement("td"),o=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"];t.innerHTML=o[e],v.appendChild(t)}for(h.appendChild(v),v=document.createElement("tr"),e=0;e<7&&e!==u;e++){var t=document.createElement("td");t.innerHTML="",v.appendChild(t)}for(var a=1;e<7;e++){var t=document.createElement("td");t.innerHTML="<span>"+a+"</span>",a===d&&t.classList.add("currentDay"),a++,v.appendChild(t)}h.appendChild(v);for(var n=2;n<7;n++){for(v=document.createElement("tr"),e=0;e<7;e++){if(a>g)return h.appendChild(v),h;var t=document.createElement("td");t.innerHTML="<span>"+a+"</span>",a===d&&t.classList.add("currentDay"),a++,v.appendChild(t)}h.appendChild(v)}}var n=new Date,r=["January","February","March","April","May","June","July","August","September","October","November","December"],i=n.getMonth(),s=n.getFullYear(),d=n.getDate(),l=r[i]+" 1 "+s,c=new Date(l).toDateString(),f=c.substring(0,3),p=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],u=p.indexOf(f),g=new Date(s,i+1,0).getDate(),h=document.createElement("table"),m=void 0,v=document.createElement("tr");m=a(),e.exports={theCalendar:m,month_name:r,month:i,year:s}},function(e,t,o){"use strict";function a(e,t){var o=e.item,a=e.isDone,n=a?"checked":"",r=a?"complete":"",i='<li class="todoItem '+r+'"><i class="fa fa-trash-o fa-fw delTodo"></i><input type="checkbox" '+n+"/><span>"+o+"</span></li>";$(t).append(i)}function n(e){var t={item:e,isDone:!1},o=d.getBrowserSetting("todos",[]);o.push(t),d.setBrowserSetting("todos",o)}function r(){return d.getBrowserSetting("todos",[])}function i(){var e=[].slice.call($("li.todoItem")),t=[];e.forEach(function(e){var o={item:$(e).find("span").text(),isDone:$(e).find("input").prop("checked")};t.push(o)}),d.setBrowserSetting("todos",t)}function s(){$("li.todoItem").remove(),i()}var d=o(0);e.exports={addNewTodoToDOM:a,saveTodo:n,getSavedTodos:r,saveTodoList:i,clearAllTodos:s}},function(e,t,o){t=e.exports=o(9)(void 0),t.push([e.i,"@import url(https://fonts.googleapis.com/css?family=Raleway|Roboto+Mono|Montserrat|Pridi|Work+Sans|Mitr);",""]),t.push([e.i,'@font-face{font-family:BebasNeue;src:url("/assets/BebasNeue.otf")}@font-face{font-family:MuseoSans;src:url("/assets/fonts/MuseoSans.otf")}@font-face{font-family:Acknowledgement;src:url("/assets/fonts/acknowledgement/Acknowledgement.otf") format("opentype")}@font-face{font-family:Alfa Slab One;src:url("/assets/fonts/alfa-slab/AlfaSlabOne-Regular.ttf") format("truetype")}@font-face{font-family:Archivo Black;src:url("/assets/fonts/archivo-black/ArchivoBlack.otf") format("opentype")}@font-face{font-family:Candal;src:url("/assets/fonts/candal/Candal.ttf") format("truetype")}@keyframes shake{10%,90%{transform:rotate(.7deg)}20%,80%{transform:rotate(-.7deg)}30%,50%,70%{transform:rotate(.7deg)}40%,60%{transform:rotate(-.7deg)}}@keyframes swing{20%{-webkit-transform:rotate3d(1,0,1,.5deg);transform:rotate3d(0,0,2,1deg)}40%{-webkit-transform:rotate(-.5deg);transform:rotate3d(0,0,2,-1deg)}60%{-webkit-transform:rotate3d(1,0,1,.5deg);transform:rotate3d(0,0,2,1deg)}80%{-webkit-transform:rotate(-.5deg);transform:rotate3d(0,0,2,-1deg)}to{-webkit-transform:rotate3d(1,0,1,.5deg);transform:rotate3d(0,0,2,1deg)}}.wrapper .content-wrapper .heading .dateTime{box-shadow:0 2px 10px #999}.lightbox{display:none;background:rgba(0,0,0,.6);left:0;bottom:0;right:0;width:100%;height:100%}.lightbox,.modal{position:fixed;top:0}.modal{text-align:left;font-size:1em;font-family:Montserrat,BebasNeue,sans-serif;right:-400px;width:400px;z-index:100;display:flex;flex-direction:column;background:#fff;transition:all .4s;overflow:auto}.modal select{color:#000}.modal form{display:block;padding:24px;width:100%;max-height:90vh}.modal form,.modal form fieldset{overflow:auto}.modal input[type=text]{box-sizing:border-box;-webkit-box-sizing:border-box;-moz-box-sizing:border-box;outline:none;display:block;width:100%;padding:7px;border:none;border-bottom:1px solid #ddd;background:transparent;margin-bottom:10px;font:16px Helvetica,sans-serif;height:45px}.modal fieldset{border:none}.modal .closeBtn{color:#000;position:absolute;top:15px;right:10px}.modal h3{font-family:Archivo Black;font-size:24px;display:block;background:#666;width:100%;padding:20px;text-transform:uppercase}.modal h3,.modal h3 i{color:#333}.modal label{text-transform:uppercase;font-family:Archivo Black;font-size:16px}.addModal{align-items:center;z-index:2}.addModal .addFavForm{width:100%;padding:24px}.addModal p{font-family:Montserrat,BebasNeue,sans-serif;text-align:center}.addModal .addFormError{display:none;color:#c30a20}.addModal .addBtn{display:block;padding:10px 20px;text-align:center;text-decoration:none;background:#45bb78;box-shadow:0 1px 1px 0 #379660;transition:all .2s;margin:10px auto 25px;color:#308354;text-transform:uppercase;font-family:Archivo Black;font-size:24px;font-weight:bolder}.addModal .addBtn:hover{background:#379660;box-shadow:none;color:#fff}.addModal .popularFavs{display:flex;flex-direction:row;flex-wrap:wrap;justify-content:flex-start;width:100%}.addModal .popularFavs .popFav{margin:1px;font-size:.7em;width:32%;padding:10px;border:1px solid #5d54cd;text-align:center;color:#fff;text-decoration:none;background:#7f77e0;box-shadow:0 1px 1px #999;transition:all .2s}.addModal .popularFavs .popFav:hover{background:#5d54cd;transform:scale(1.1)}.addModal .hidePopFaves{display:block;clear:both;padding:10px;font-size:12px;color:#fff}.settingsModal{z-index:3;align-items:center;font-size:1em}.settingsModal i{font-size:1.5em}.settingsModal fieldset{font-size:20px;margin:30px auto}.settingsModal input[type=radio]{margin:5px 10px;display:inline-block}.settingsModal select{padding:10px;margin:5px 0}.settingsModal .settingsBtn{padding:10px 20px;text-align:center;text-decoration:none;background:#45bb78;box-shadow:0 1px 1px 0 #379660;transition:all .2s;color:#308354;font-size:.8em;display:block;margin:15px;text-transform:uppercase;font-size:16px;font-weight:bolder}.settingsModal .settingsBtn:hover{background:#379660;box-shadow:none;color:#fff}.settingsModal .removeBtn{padding:10px 20px;text-align:center;text-decoration:none;background:#a73f3f;box-shadow:0 1px 1px 0 #823131;transition:all .2s;color:#6f2a2a;font-size:.8em;display:block;text-transform:uppercase;font-size:16px;font-weight:bolder}.settingsModal .removeBtn:hover{background:#823131;box-shadow:none;color:#fff}.settingsModal .bgURLError{display:none;color:red}.calendarModal{z-index:4;display:flex;flex-direction:column;align-items:center;overflow:auto}.calendarModal i{font-size:1.5em}.calendarModal .calendar-display{width:100%;text-align:center}.calendarModal .calendar-display .calendar-head{font-size:1.5em;margin-top:50px}.calendarModal .calendar-display .calendar .currentDay span{display:block;padding:10px;background:#7f77e0;border:2px solid #5d54cd;color:#fff;font-size:1.1em}.calendar-display .calendar-head span{text-transform:uppercase;border-bottom:2px solid #fff;padding-bottom:5px}.calendar-display .calendar table{width:100%;margin-top:24px}.calendar-display .calendar table tr{text-transform:uppercase}.calendar-display .calendar table tr td{padding:12px;font-size:14px}.onboardingModal{font-family:Montserrat,sans-serif;text-align:left;overflow-y:auto;padding:5px 30px 30px}.onboardingModal h1{font-size:1.1em;text-align:center}.onboardingModal p{font-size:1em;margin:0}.onboardingModal input{border:1px solid #000}.onboardingModal .addBtn{display:block;padding:13px 20px;background:#45bb78;font-size:.75em;text-decoration:none;text-align:center;color:#fff;transition:all .2s}.onboardingModal .addBtn:hover{background:#2b9f5d}.onboardingModal .orGradient{text-align:center;border:1px solid #333;border-radius:20px;width:20%;margin:0 auto;padding:15px 7px}.favorites-wrapper{width:100%}.favorites-wrapper #favorites{margin:30px auto;display:flex;flex-wrap:wrap;justify-content:center;width:90%;padding:10px 0;list-style-type:none}.favorites-wrapper #favorites li a{display:flex;position:relative;flex-shrink:2;padding:80px 120px;text-decoration:none;transition:transform .3s,margin .3s;margin:5px;box-shadow:0 2px 10px #999}.favorites-wrapper #favorites li a i{position:absolute;font-size:2.5em;color:#fff;top:5px;z-index:3}.favorites-wrapper #favorites li a .optDel{right:2px}.favorites-wrapper #favorites li a .optDel:hover{cursor:pointer}.favorites-wrapper #favorites li a .optEdit,.favorites-wrapper #favorites li a .optTag{right:40px;cursor:pointer}.favorites-wrapper #favorites li a:active:before{background:rgba(1,1,1,.4);content:"";width:100%;height:100%;position:absolute;left:0;top:0}.favorites-wrapper #favorites li .favorite.editing{margin:2px;animation:shake 6s infinite;transform-origin:top center}.favorites-wrapper #favorites li .favorite.editing:hover{transform:scale(0);cursor:move}.favorites-wrapper #favorites li .favorite.editing:before{background:rgba(1,1,1,.4);content:"";width:100%;height:100%;position:absolute;left:0;top:0}a.favorite.hoverPop:hover{z-index:10;transform:scale(1.1)}a.favorite.hoverHighlight:hover:before{background:rgba(0,0,0,.7);content:"";width:100%;height:100%;position:absolute;left:0;top:0;transform:scale(1)}a.favorite.hoverNone:hover{transform:scale(1)}.todosModal .clearBtn{display:block;padding:10px 20px;text-align:center;text-decoration:none;background:#903232;box-shadow:0 1px 1px 0 #6a2525;transition:all .2s;color:#571e1e;text-transform:uppercase;font-family:Archivo Black;font-size:24px;font-weight:bolder}.todosModal .clearBtn:hover{background:#6a2525;box-shadow:none;color:#fff}.todosModal .todoList,.todosModal .todoList .todoList-head{display:flex;flex-direction:column;align-items:center;justify-content:center}.todosModal .todoList .todoList-head{width:100%;margin:10px 0}.todosModal .todoList .todoList-head .todoForm{width:100%;display:flex;justify-content:space-between;align-items:center}.todosModal .todoList .todoList-head .todoForm .newTodo{align-self:center;margin:0}.todosModal .todoList .todoList-head .todoForm .addTodo{display:block;padding:10px 20px;text-align:center;text-decoration:none;background:#45bb78;box-shadow:0 1px 1px 0 #379660;transition:all .2s;padding:7px 10px;margin-left:5px;font-size:24px}.todosModal .todoList .todoList-head .todoForm .addTodo:hover{background:#379660;box-shadow:none}.todosModal .todoList .todoList-head .todoForm .addTodo i{color:#308354}.todosModal .todoList .todoList-body{display:flex;flex-direction:column;width:100%}.todosModal .todoList .todoList-body .todos{overflow-y:auto;width:100%}.todosModal .todoList .todoList-body .todos .todoItem:first-child{border-bottom:none}.todosModal .todoList .todoList-body .todos .todoItem{box-sizing:border-box;border-bottom:1px solid #eee;padding:5px;margin:5px;width:100%;word-wrap:break-word}.todosModal .todoList .todoList-body .todos .todoItem.complete{text-decoration:line-through}.todosModal .todoList .todoList-body .todos .todoItem i{cursor:pointer}body.theme-light{background:#fff;color:#333}body.theme-light input{color:#333}body.theme-light .headerPanel,body.theme-light .modal{background:#fff}body.theme-light .favorite{border:.5px solid #000;color:#fff}body.theme-light .addTodo,body.theme-light .popFav{color:#fff}body.theme-fade{background:#fff;box-sizing:border-box;font-family:Montserrat,BebasNeue,sans-serif;color:#fff}body.theme-fade input[type=text]{color:#fff}body.theme-fade div.modal{background:rgba(0,0,0,.4)}body.theme-fade .headerPanel{background:rgba(0,0,0,.4);border:none}body.theme-fade .headerPanel #time{border-right:2px solid #666}body.theme-fade .headerPanel .userAction{color:#fff}*{box-sizing:border-box;padding:0;margin:0}body{position:absolute;top:0;bottom:0;right:0;left:0}body,ol,ul{font-family:Montserrat,BebasNeue,sans-serif}.wrapper{flex-direction:row}.wrapper,.wrapper .content-wrapper{display:flex;justify-content:center}.wrapper .content-wrapper{flex-direction:column}.wrapper .content-wrapper .searchbox{width:640px;margin:20px auto}.wrapper .content-wrapper .container{width:960px;margin:0 auto}.wrapper .content-wrapper .heading{display:flex;margin-left:30px;margin-top:30px;text-align:left;font-family:Montserrat,BebasNeue,sans-serif;justify-content:space-between}.wrapper .content-wrapper .heading .dateTime{display:flex;align-items:center;justify-content:center;padding:10px;height:70px}.wrapper .content-wrapper .heading .dateTime p{line-height:1em;padding:10px;margin:0;font-weight:100;font-size:30px}.wrapper .content-wrapper .heading .options{box-shadow:0 2px 10px #999;display:flex;margin-right:30px;height:70px}.wrapper .content-wrapper .heading .options .userAction{display:block;padding:20px;text-decoration:none;transition:all .2s;font-size:16px}.wrapper .content-wrapper .heading .options .userAction:hover{color:#333;transform:scale(1.2)}.wrapper .content-wrapper .heading .options .userAction i{padding-top:10px}.wrapper .content-wrapper .heading .options .arrowContainer{font-size:4.5em;width:22%;position:absolute;margin-top:0}.wrapper .content-wrapper .heading .options .arrowContainer p{font-size:.5em}::-webkit-scrollbar-track{-webkit-box-shadow:inset 1px 1px 1px rgba(0,0,0,.8);background:#aaa}::-webkit-scrollbar-thumb{background:#fff;border:1px solid rgba(0,0,0,.8)}',""])},function(e,t){function o(e,t){var o=e[1]||"",n=e[3];if(!n)return o;if(t&&"function"==typeof btoa){var r=a(n);return[o].concat(n.sources.map(function(e){return"/*# sourceURL="+n.sourceRoot+e+" */"})).concat([r]).join("\n")}return[o].join("\n")}function a(e){return"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e))))+" */"}e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var a=o(t,e);return t[2]?"@media "+t[2]+"{"+a+"}":a}).join("")},t.i=function(e,o){"string"==typeof e&&(e=[[null,e,""]]);for(var a={},n=0;n<this.length;n++){var r=this[n][0];"number"==typeof r&&(a[r]=!0)}for(n=0;n<e.length;n++){var i=e[n];"number"==typeof i[0]&&a[i[0]]||(o&&!i[2]?i[2]=o:o&&(i[2]="("+i[2]+") and ("+o+")"),t.push(i))}},t}},function(e,t,o){function a(e,t){for(var o=0;o<e.length;o++){var a=e[o],n=g[a.id];if(n){n.refs++;for(var r=0;r<n.parts.length;r++)n.parts[r](a.parts[r]);for(;r<a.parts.length;r++)n.parts.push(c(a.parts[r],t))}else{for(var i=[],r=0;r<a.parts.length;r++)i.push(c(a.parts[r],t));g[a.id]={id:a.id,refs:1,parts:i}}}}function n(e,t){for(var o=[],a={},n=0;n<e.length;n++){var r=e[n],i=t.base?r[0]+t.base:r[0],s=r[1],d=r[2],l=r[3],c={css:s,media:d,sourceMap:l};a[i]?a[i].parts.push(c):o.push(a[i]={id:i,parts:[c]})}return o}function r(e,t){var o=v(e.insertInto);if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var a=w[w.length-1];if("top"===e.insertAt)a?a.nextSibling?o.insertBefore(t,a.nextSibling):o.appendChild(t):o.insertBefore(t,o.firstChild),w.push(t);else{if("bottom"!==e.insertAt)throw new Error("Invalid value for parameter 'insertAt'. Must be 'top' or 'bottom'.");o.appendChild(t)}}function i(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=w.indexOf(e);t>=0&&w.splice(t,1)}function s(e){var t=document.createElement("style");return e.attrs.type="text/css",l(t,e.attrs),r(e,t),t}function d(e){var t=document.createElement("link");return e.attrs.type="text/css",e.attrs.rel="stylesheet",l(t,e.attrs),r(e,t),t}function l(e,t){Object.keys(t).forEach(function(o){e.setAttribute(o,t[o])})}function c(e,t){var o,a,n,r;if(t.transform&&e.css){if(!(r=t.transform(e.css)))return function(){};e.css=r}if(t.singleton){var l=x++;o=b||(b=s(t)),a=f.bind(null,o,l,!1),n=f.bind(null,o,l,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(o=d(t),a=u.bind(null,o,t),n=function(){i(o),o.href&&URL.revokeObjectURL(o.href)}):(o=s(t),a=p.bind(null,o),n=function(){i(o)});return a(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;a(e=t)}else n()}}function f(e,t,o,a){var n=o?"":a.css;if(e.styleSheet)e.styleSheet.cssText=k(t,n);else{var r=document.createTextNode(n),i=e.childNodes;i[t]&&e.removeChild(i[t]),i.length?e.insertBefore(r,i[t]):e.appendChild(r)}}function p(e,t){var o=t.css,a=t.media;if(a&&e.setAttribute("media",a),e.styleSheet)e.styleSheet.cssText=o;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(o))}}function u(e,t,o){var a=o.css,n=o.sourceMap,r=void 0===t.convertToAbsoluteUrls&&n;(t.convertToAbsoluteUrls||r)&&(a=y(a)),n&&(a+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(n))))+" */");var i=new Blob([a],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(i),s&&URL.revokeObjectURL(s)}var g={},h=function(e){var t;return function(){return void 0===t&&(t=e.apply(this,arguments)),t}},m=h(function(){return window&&document&&document.all&&!window.atob}),v=function(e){var t={};return function(o){return void 0===t[o]&&(t[o]=e.call(this,o)),t[o]}}(function(e){return document.querySelector(e)}),b=null,x=0,w=[],y=o(11);e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");t=t||{},t.attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||(t.singleton=m()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var o=n(e,t);return a(o,t),function(e){for(var r=[],i=0;i<o.length;i++){var s=o[i],d=g[s.id];d.refs--,r.push(d)}if(e){a(n(e,t),t)}for(var i=0;i<r.length;i++){var d=r[i];if(0===d.refs){for(var l=0;l<d.parts.length;l++)d.parts[l]();delete g[d.id]}}}};var k=function(){var e=[];return function(t,o){return e[t]=o,e.filter(Boolean).join("\n")}}()},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var o=t.protocol+"//"+t.host,a=o+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var n=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});if(/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/)/i.test(n))return e;var r;return r=0===n.indexOf("//")?n:0===n.indexOf("/")?o+n:a+n.replace(/^\.\//,""),"url("+JSON.stringify(r)+")"})}},function(e,t,o){o(4),e.exports=o(3)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,