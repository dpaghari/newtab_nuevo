/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/FavoritesManager.js":
/*!********************************!*\
  !*** ./js/FavoritesManager.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Util = __webpack_require__(/*! ./util.js */ "./js/util.js");
const SettingsManager = __webpack_require__(/*! ./SettingsManager.js */ "./js/SettingsManager.js");

// Add a new favorite to the favorites grid
function addFavorite(title, url, imageUrl, NTInstance) {
  var newListEntry = document.createElement("LI");
  var newFavorite = document.createElement("A");
  newFavorite.href = url;
  $.get(imageUrl).done(function () {
    newFavorite.style.backgroundImage = "url(" + imageUrl + ")";
  }).fail(function () {
    newFavorite.style.backgroundImage = "url('/newtab/images/placeholder.png')";
  });
  newFavorite.style.backgroundSize = "cover";
  newFavorite.style.backgroundPosition = "center center";
  newFavorite.style.backgroundRepeat = "no-repeat";
  newFavorite.classList.add("favorite", NTInstance.currentSettings.hover);
  newFavorite.dataset.title = title;
  newFavorite.dataset.bgImg = imageUrl;
  var optDel = document.createElement("I");
  optDel.classList.add("fa", "fa-trash-o", "fa-lg", "fa-fw", "optDel");
  // var optTag = document.createElement("I");
  // optTag.classList.add("fa", "fa-tag", "fa-lg", "fa-fw", "optTag");
  newFavorite.appendChild(optDel);
  // newFavorite.appendChild(optTag);
  newListEntry.appendChild(newFavorite);
  $("#favorites").append(newListEntry);
  let savedFaveSize = NTInstance.getSetting("userFaveSize", "60");
  SettingsManager.setSize(savedFaveSize, NTInstance);
  $(".favorite").children().hide();
}

// Save favorite to local storage
function saveFavorite(entry, NTInstance) {
  var currentSaved = [];
  var savedFavorites = NTInstance.getSetting("savedFavorites", null);
  if (savedFavorites !== null) {
    currentSaved = savedFavorites;
  }
  currentSaved.push(entry);
  NTInstance.setSetting("savedFavorites", currentSaved);
  addFavorite(entry.title, entry.url, entry.bgImg, NTInstance);
  $("#inputUrl").val("");
  $("#inputImage").val("");
}

function getPopularFavorites() {
  return $.ajax({
    url: "./popularFavs.json",
    method: "GET"
  });
}

function deleteFavorite(delUrl, NTInstance) {
  var savedFavorites = NTInstance.getSetting("savedFavorites", null);
  if (savedFavorites !== null) {
    let filteredFavorites = savedFavorites.filter(item => {
      if (item.url !== delUrl) return true;
    });
    NTInstance.setSetting("savedFavorites", filteredFavorites);
  }
}

// Load saved favorites onload
function loadSavedFavorites(NTInstance) {
  var savedItems = [];
  var savedFavorites = NTInstance.getSetting("savedFavorites", null);
  if (savedFavorites !== null) {
    savedItems = savedFavorites;
    savedItems.forEach(function (item) {
      addFavorite(item.title, item.url, item.bgImg, NTInstance);
    });
  }
}

function loadPopularFavorites(NTInstance) {
  var popFavs = getPopularFavorites();
  popFavs.then(function (res) {
    var response = JSON.parse(res);
    createPopularFavs(response, NTInstance);
  });
}
function loadDefaultFavorites(NTInstance) {
  var popFavs = Util.getPromise("/newtab/defaultFavs.json");
  popFavs.then(function (res) {
    var response = JSON.parse(res);
    createDefaultFavs(response, NTInstance);
  });
}

function createDefaultFavs(favorites, NTInstance) {
  var list = favorites.default_favorites;

  for (var i = 0; i < list.length; i++) {
    var entry = {
      "title": list[i].title,
      "url": list[i].url,
      "bgImg": list[i].bgImg
    };
    saveFavorite(entry, NTInstance);
  }
}

function createPopularFavs(favorites, NTInstance) {

  var list = favorites.popular_favorites;
  var savedFavorites = NTInstance.getSetting("savedFavorites", null);

  var match;
  for (var i = 0; i < list.length; i++) {
    if (savedFavorites !== null) {
      match = savedFavorites.find(el => {
        return el.url === list[i].url;
      });
    }
    if (match === undefined) {
      var favHTML = "<a href='#' class='popFav' data-title=" + list[i].title + " data-url=" + list[i].url + " data-imgurl=" + list[i].bgImg + ">" + list[i].title + "</a>";
      $(".popularFavs").append(favHTML);
    }
  }
  $(".popularFavs").after(`<a href="#" class="hidePopFaves">Never Show Again</a>`);
}

module.exports = {
  addFavorite,
  saveFavorite,
  getPopularFavorites,
  deleteFavorite,
  loadSavedFavorites,
  loadPopularFavorites,
  loadDefaultFavorites,
  createDefaultFavs,
  createPopularFavs
};

/***/ }),

/***/ "./js/SettingsManager.js":
/*!*******************************!*\
  !*** ./js/SettingsManager.js ***!
  \*******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// const $ = require("jquery");
const ThemeManager = __webpack_require__(/*! ./ThemeManager.js */ "./js/ThemeManager.js");
// Prompt user for image to use for bookmark
// and also the url.  Append to favorites


function loadUserSettings(NTInstance) {
  var userTheme = NTInstance.getSetting("userTheme", "fade");
  var userFont = NTInstance.getSetting("userFont", "Montserrat");
  var userHover = NTInstance.getSetting("userHover", "hoverPop");
  var userBGImg = NTInstance.getSetting("userThemeBG", null);
  var userFaveSize = NTInstance.getSetting("userFaveSize", "80");
  var userBGStyle = NTInstance.getSetting("userBGStyle", "repeat");
  NTInstance.currentSettings = {
    "theme": userTheme,
    "font": userFont,
    "hover": userHover,
    "background": userBGImg,
    "faveSize": userFaveSize,
    "bgStyle": userBGStyle
  };
  // console.log(NTInstance.currentSettings);
}
function setUserSettings(settings) {
  let cardSizeStr = settings.faveSize + "px " + (parseInt(settings.faveSize) + 40) + "px";

  // Set Theme Styles
  ThemeManager.setTheme(settings.theme);
  // Set BG Image Style
  if (settings.bgStyle === "cover") {
    $("body").css("background-size", settings.bgStyle);
  } else {
    $("body").css("background-repeat", settings.bgStyle);
    $("body").css("background-size", "auto");
  }
  // Set Font
  $("*").not("i, h3, label").css("font-family", settings.font);

  var radios = $("input[name=theme-select]");
  $(radios).each(function (i, el) {
    if ($(el).val() === settings.theme) $(el).attr("checked", "checked");
  });
  // Set Background
  if (settings.background !== null) {
    $("body").css("background-image", "url(" + settings.background + ")");
    $("input[name=themeBGImage]").val(settings.background);
  }
  // Set Settings Options to their saved values
  $(".themeBGImageRepeat").val(settings.bgStyle);
  $(".favoriteSize").val(settings.faveSize);
  $("select.fontOption").val(settings.font);
  $("select.hoverOption").val(settings.hover);
}

function setFont(fontName, NTInstance) {
  let newFontStack = fontName;
  NTInstance.setSetting("userFont", newFontStack);
  console.log(newFontStack);
  $("*").not("i, .settingsBtn, .removeBtn, .addBtn, .clearBtn").css("font-family", newFontStack);
}

function setHover(hoverName, NTInstance) {
  NTInstance.setSetting("userHover", hoverName);
  switch (hoverName) {

    case "hoverPop":
      $(".favorite").addClass("hoverPop").removeClass("hoverNone hoverHighlight");
      break;

    case "hoverHighlight":
      $(".favorite").addClass("hoverHighlight").removeClass("hoverNone hoverPop");
      break;

    case "hoverNone":
      $(".favorite").addClass("hoverNone").removeClass("hoverPop hoverHighlight");
      break;
  }
  //$(".favorite").addClass(hoverName).removeClass("hoverNone hoverHighlight");
}

function setSize(sizeVal, NTInstance) {
  NTInstance.setSetting("userFaveSize", sizeVal);
  let cardSizeStr = sizeVal + "px " + (parseInt(sizeVal) + 40) + "px";
  $(".favorite").css({
    "padding": cardSizeStr,
    "transition": "0.4s padding, 0.3s transform, 0.3s margin"
  });
}
function setBGStyle(styleVal, NTInstance) {
  NTInstance.setSetting("userBGStyle", styleVal);
  if (styleVal === "cover") {
    $("body").css("background-size", styleVal);
  } else {
    $("body").css("background-repeat", styleVal);
    $("body").css("background-size", "auto");
  }
  // let cardSizeStr = sizeVal + "px " + (parseInt(sizeVal) + 40) + "px";
}

module.exports = {
  loadUserSettings,
  setUserSettings,
  setFont,
  setHover,
  setSize,
  setBGStyle
};

/***/ }),

/***/ "./js/ThemeManager.js":
/*!****************************!*\
  !*** ./js/ThemeManager.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Util = __webpack_require__(/*! ./util.js */ "./js/util.js");

class ThemeManager {
  constructor() {
    this.currentTheme = "fade";
  }

  init() {
    this.loadTheme();
  }

  getTheme() {
    return this.currentTheme;
  }

  setTheme(themeName) {
    switch (themeName) {
      case "fade":
        this.setFadeTheme();
        break;
      case "light":
        this.setLightTheme();
        break;
      case "dark":
        this.setDarkTheme();
        break;
      default:
        this.setFadeTheme();
        break;
    }
  }

  setFadeTheme() {
    $('body').addClass('theme-fade').removeClass('theme-light theme-dark');
  }
  setLightTheme() {
    $('body').addClass('theme-light').removeClass('theme-fade theme-dark');
  }
  setDarkTheme() {
    $('body').addClass('theme-dark').removeClass('theme-light theme-fade');
  }

  saveTheme(theme) {
    Util.setBrowserSetting("currentTheme", theme);
  }

  loadTheme() {
    let currentTheme = Util.getBrowserSetting("currentTheme", "fade");
    this.setTheme(currentTheme);
  }

}

const themeManager = new ThemeManager();
module.exports = themeManager;

/***/ }),

/***/ "./js/createCalendar.js":
/*!******************************!*\
  !*** ./js/createCalendar.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports) {

// Calendar
let d = new Date();
let month_name = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

let month = d.getMonth(); // 0 - 11
let year = d.getFullYear(); // 2016
let today = d.getDate(); // 23

// January 1 2016
let first_date = month_name[month] + " " + 1 + " " + year;

// Sun January 1 2016
let tmp = new Date(first_date).toDateString();
// Sun
let first_day = tmp.substring(0, 3);
let day_name = ['Sun', 'Mon', "Tue", "Wed", "Thu", "Fri", "Sat"];
// [0]
let day_no = day_name.indexOf(first_day);
let days = new Date(year, month + 1, 0).getDate();
let table = document.createElement("table");
let theCalendar;

let tr = document.createElement("tr");
function buildCalendar() {

  // Row for day labels
  for (var c = 0; c < 7; c++) {
    var td = document.createElement("td");
    var daysOfTheWeek = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    td.innerHTML = daysOfTheWeek[c];
    tr.appendChild(td);
  }
  table.appendChild(tr);

  // Row for blank spaces
  tr = document.createElement("tr");
  for (c = 0; c < 7; c++) {
    if (c === day_no) {
      break;
    }
    var td = document.createElement("td");
    td.innerHTML = "";
    tr.appendChild(td);
  }

  // Start counting days of the month
  var count = 1;

  for (; c < 7; c++) {
    var td = document.createElement("td");

    td.innerHTML = "<span>" + count + "</span>";
    if (count === today) {
      td.classList.add("currentDay");
    }

    count++;
    tr.appendChild(td);
  }
  table.appendChild(tr);

  // rest of the date rows
  for (var r = 2; r < 7; r++) {

    tr = document.createElement("tr");
    for (c = 0; c < 7; c++) {
      if (count > days) {
        table.appendChild(tr);
        return table;
        //console.log("theCalendar: " + theCalendar);
      }
      var td = document.createElement("td");
      td.innerHTML = "<span>" + count + "</span>";
      if (count === today) {
        td.classList.add("currentDay");
      }
      count++;
      tr.appendChild(td);
    }
    table.appendChild(tr);
  }
}

theCalendar = buildCalendar();
module.exports = {
  theCalendar,
  month_name,
  month,
  year
};

/***/ }),

/***/ "./js/newtab.js":
/*!**********************!*\
  !*** ./js/newtab.js ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {



$(document).ready(function () {
  const background = chrome.extension.getBackgroundPage();
  const NTInstance = background.NTInstance;
  NTInstance.editing = false;
  NTInstance.currentSettings = {
    "theme": "light",
    "font": "Montserrat",
    "hover": "hoverPop",
    "background": null,
    "faveSize": "60"
  };
  // chrome.storage.local.get(function(res){
  //   console.log(res);
  // });

  const SettingsManager = __webpack_require__(/*! ./SettingsManager.js */ "./js/SettingsManager.js");
  const Calendar = __webpack_require__(/*! ./createCalendar.js */ "./js/createCalendar.js");
  const FavoritesManager = __webpack_require__(/*! ./FavoritesManager.js */ "./js/FavoritesManager.js");
  const Util = __webpack_require__(/*! ./util.js */ "./js/util.js");
  const Todos = __webpack_require__(/*! ./todos.js */ "./js/todos.js");
  const ThemeManager = __webpack_require__(/*! ./ThemeManager.js */ "./js/ThemeManager.js");

  SettingsManager.loadUserSettings(NTInstance);
  FavoritesManager.loadSavedFavorites(NTInstance);
  FavoritesManager.loadPopularFavorites(NTInstance);
  SettingsManager.setUserSettings(NTInstance.currentSettings);
  var calendar = Calendar.theCalendar;
  $(".calendar-head").html("<span>" + Calendar.month_name[Calendar.month] + " " + Calendar.year + "</span");
  $(".calendar").append(calendar);
  $("#favorites").sortable();
  $("#favorites").sortable("disable");
  chrome.runtime.sendMessage({ task: "checkFirstRun" }, function (res) {
    if (res.firstRun) {
      FavoritesManager.loadDefaultFavorites(NTInstance);
      triggerModal($(".addModal"));
      $("#obInputTitle").focus();
    } else {
      let $todoList = $(".todos");
      var savedTodos = Todos.getSavedTodos();
      savedTodos.forEach(el => {
        Todos.addNewTodoToDOM(el, $todoList);
      });
      let hidePopFaves = NTInstance.getSetting("hidePopFaves", false);

      if (hidePopFaves) {
        $(".popularFavs, .addExtra, .hidePopFaves").hide();
      }
    }

    // Hide edit icons
    $(".favorite").children().hide();
  });

  // Refresh time every second
  var currentTime = new Date().toLocaleTimeString(navigator.language, { hour: '2-digit', minute: '2-digit' });
  $('#time').html(currentTime);
  var currentDate = new Date().toDateString();
  $('#date').html(currentDate);
  setInterval(function () {
    currentTime = new Date().toLocaleTimeString(navigator.language, { hour: '2-digit', minute: '2-digit' });
    $('#time').html(currentTime);
  }, 1000);
  /*
    Handlers for the top right main user actions menu
  */
  $(document).on("click", ".userAction", function (e) {
    e.preventDefault();
    var clickElement = $(this).attr('id');

    switch (clickElement) {
      case "addFavorite":
        e.preventDefault();
        if ($(".addModal .popularFavs").children().length === 0) {
          $(".addExtra").hide();
        }
        var modalToOpen = $(".addModal");
        triggerModal(modalToOpen);
        $("#inputTitle").focus();
        break;

      case 'editMode':
        e.preventDefault();
        $(".favorite").toggleClass("editing");
        $(".favorite").children().toggle();
        if (!NTInstance.editing) {
          $("#favorites").sortable("enable");
        } else {
          $("#favorites").sortable("disable");
          let newFaves = [].slice.call($(".favorite"), 0);
          let reorderedFaves = [];
          newFaves.forEach(el => {
            let { title, bgImg } = el.dataset;
            let newFave = {
              "title": title,
              "url": el.href,
              "bgImg": bgImg
            };
            reorderedFaves.push(newFave);
          });
          NTInstance.setSetting("savedFavorites", reorderedFaves);
        }
        NTInstance.editing = !NTInstance.editing;
        break;

      case 'openSettings':
        e.preventDefault();
        var settingsModal = $(".settingsModal");
        triggerModal(settingsModal);

        break;
      case 'openCalendar':
        e.preventDefault();
        var calendarModal = $(".calendarModal");
        triggerModal(calendarModal);
        break;
      case 'openTodos':
        e.preventDefault();
        var todosModal = $(".todosModal");
        triggerModal(todosModal);
        break;
    }
  });

  /*
    Handler for the suggested favorites in the Add New Favorite menu
  */
  $(document).on("click", ".popFav", function (e) {
    e.preventDefault();
    var selection = $(this)[0];
    var titletoAdd = selection.dataset.title;
    var urltoAdd = selection.dataset.url;
    var imgtoAdd = selection.dataset.imgurl;

    var newEntry = {
      "title": titletoAdd,
      "url": urltoAdd,
      "bgImg": imgtoAdd
    };
    FavoritesManager.saveFavorite(newEntry, NTInstance);
    $(this).remove();
    var allPopFavs = $(".popularFavs").children();
    var popArr = [].slice.call(allPopFavs, 0);
    var match = popArr.filter(function (el) {
      return $(el).data("url") === urltoAdd;
    });
    $(match).hide();
    if ($(".addModal .popularFavs").children().length === 0) {
      NTInstance.setSetting("hidePopFaves", true);
      $(".addExtra, .popularFavs, .hidePopFaves").hide();
    }
  });
  /*
    Handler for close button
  */
  $(document).on("click", ".closeBtn", function (e) {
    e.preventDefault();
    var modalToClose = $(this).closest(".modal");
    closeModal(modalToClose);
  });

  /*
    Handler for the add button on the Add a New Favorite menu
  */
  $(document).on("click", ".addBtn", function (e) {
    e.preventDefault();
    var titleVal = $("#inputTitle").val();
    var urlVal = $("#inputUrl").val();
    urlVal = Util.addHttp(urlVal);
    var isValidURL = Util.validateURL(urlVal);
    if (!isValidURL) {
      $(".addFormError").css("color", "red");
      $(".addFormError").text("Please enter a valid URL").show();
    }
    var imageVal = $("#inputImage").val();
    imageVal = Util.addHttp(imageVal);
    var isValidImgURL = Util.validateURL(imageVal);
    if (!isValidImgURL) {
      $(".addFormError").text("Please enter a valid Image URL").show();
    }
    if (!isValidURL && !isValidImgURL) {
      $(".addFormError").text("Please enter a valid URL & Image URL").show();
    }
    if (titleVal !== "" && urlVal !== "" && isValidURL && imageVal !== "" && isValidImgURL) {
      var newEntry = {
        "title": titleVal,
        "url": urlVal,
        "bgImg": imageVal
      };
      FavoritesManager.saveFavorite(newEntry, NTInstance);

      if ($(".modal").length !== null) {
        closeModal($(".modal"));
      }
      $(".addFormError").hide();
      $(".addFavForm input").val("");
    } else {
      $(".addFormError").show();
    }
  });
  $(document).on("click", ".updateBtn", function () {
    var newImageURL = $("input[name=themeBGImage]").val();
    var isValidURL = Util.validateURL(newImageURL);
    if (isValidURL) {
      NTInstance.setSetting("userThemeBG", newImageURL);
      $("body").css("background-image", "url('" + newImageURL + "')");
    } else {
      $(".bgURLError").show();
    }
  });
  $(document).on("click", ".removeBtn", function () {
    $("input[name=themeBGImage]").val("");
    NTInstance.setSetting("userThemeBG", null);
    $("body").css("background-image", "none");
    $(".bgURLError").hide();
  });

  $('input[type=radio][name=theme-select]').change(function () {
    NTInstance.setSetting("userTheme", this.value);
    ThemeManager.setTheme(this.value);
  });

  $(document).on("change", ".hoverOption", function () {
    var hoverSelected = $(this).val();
    SettingsManager.setHover(hoverSelected, NTInstance);
  });
  $(document).on("change", ".fontOption", function () {
    var fontSelected = $(this).val();
    SettingsManager.setFont(fontSelected, NTInstance);
  });
  $(document).on("change", ".favoriteSize", function () {
    var sizeSelected = $(this).val();
    SettingsManager.setSize(sizeSelected, NTInstance);
  });
  $(document).on("change", ".themeBGImageRepeat", function () {
    var bgStyleSelected = $(this).val();
    SettingsManager.setBGStyle(bgStyleSelected, NTInstance);
  });
  /*
    Handlers for edit mode options on each of the favorites
  */
  $(document).on("click", ".optDel", function (e) {
    e.preventDefault();

    var linkToDelete = $(this).parent().attr("href");
    FavoritesManager.deleteFavorite(linkToDelete, NTInstance);
    $(this).parent().remove();
  });
  $(document).on("click", ".favorite", function (e) {
    if ($(this).hasClass("editing")) e.preventDefault();
  });
  $(".todoForm").on("submit", e => {
    e.preventDefault();
    let $todoList = $(".todos");
    let $newTodo = $(".newTodo").val();
    Todos.addNewTodoToDOM({ "item": $newTodo, "isDone": false }, $todoList);
    Todos.saveTodo($newTodo);
    $(".newTodo").val("");
  });
  $(document).on("click", ".addTodo", () => {
    $(".todoForm").submit();
  });
  $(document).on("click", ".todoItem", function () {
    $(this).toggleClass("complete");
    var childCheckbox = $(this).find("input[type='checkbox']");
    if ($(this).hasClass("complete")) childCheckbox.prop("checked", true);else childCheckbox.prop("checked", false);
    Todos.saveTodoList();
  });

  $(document).on("click", ".hidePopFaves", function () {
    NTInstance.setSetting("hidePopFaves", true);
    $(".popularFavs, .addExtra, .hidePopFaves").hide();
  });
  $(document).on("click", ".clearBtn", function () {
    Todos.clearAllTodos();
  });

  $(document).on("click", ".delTodo", function () {
    $(this).parent().remove();
    Todos.saveTodoList();
  });

  $('#inputImage').on('blur', function () {

    let currImgUrl = $(this).val();
    console.log(currImgUrl);
    if (currImgUrl !== '') {
      $('.bookmark-preview').css({
        'backgroundImage': `url('${currImgUrl}')`,
        'backgroundSize': 'cover',
        'backgroundRepeat': 'no-repeat',
        'backgroundPosition': 'center'
      });
    }
  });
});

function triggerModal(modal) {
  $('.lightbox').fadeIn();
  modal.css({
    "right": "0px"
  });
}

function closeModal(modal) {
  $('.lightbox').fadeOut();
  modal.css({
    "right": "-425px"
  });
}

/***/ }),

/***/ "./js/todos.js":
/*!*********************!*\
  !*** ./js/todos.js ***!
  \*********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

const Util = __webpack_require__(/*! ./util.js */ "./js/util.js");

function addNewTodoToDOM(todo, location) {
  let { item, isDone } = todo;
  let isChecked = isDone ? "checked" : "";
  let complete = isDone ? "complete" : "";
  let todoHTML = `<li class="todoItem ${complete}"><i class="fa fa-trash-o fa-fw delTodo"></i><input type="checkbox" ${isChecked}/><span>${item}</span></li>`;
  $(location).append(todoHTML);
}

function saveTodo(todo) {
  var newTodoItem = {
    item: todo,
    isDone: false
  };
  var existingTodos = Util.getBrowserSetting("todos", []);
  existingTodos.push(newTodoItem);
  Util.setBrowserSetting("todos", existingTodos);
}

function getSavedTodos() {
  var savedTodos = Util.getBrowserSetting("todos", []);
  return savedTodos;
}

function saveTodoList() {
  let currentTodos = [].slice.call($("li.todoItem"));
  let updatedTodos = [];
  currentTodos.forEach(function (el) {
    let todoEntry = {
      "item": $(el).find("span").text(),
      "isDone": $(el).find("input").prop("checked")
    };
    updatedTodos.push(todoEntry);
  });

  Util.setBrowserSetting("todos", updatedTodos);
}

function clearAllTodos() {
  $("li.todoItem").remove();
  saveTodoList();
}

module.exports = {
  addNewTodoToDOM,
  saveTodo,
  getSavedTodos,
  saveTodoList,
  clearAllTodos
};

/***/ }),

/***/ "./js/util.js":
/*!********************!*\
  !*** ./js/util.js ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

// const $ = require("jquery");
module.exports = {
  getCookie,
  compareLists,
  getPromise,
  getCurrentTime,
  getParameterByName,
  getBrowser,
  getBrowserSetting,
  setBrowserSetting,
  jsonp,
  validateURL,
  addHttp
};

// Check if two lists are equal
function compareLists(list1, list2) {
  // If they aren't the same length
  if (list1.length !== list2.length) return false;
  for (var i = 0; i < list1.length; i++) {
    if (list2.indexOf(list1[i]) === -1) return false;
  }
  return true;
}
// Returns a promise object
function getPromise(data) {
  return $.ajax(data);
}

// Returns the current time as a string like "5:30 pm"
function getCurrentTime() {
  var currentTime = new Date().toLocaleTimeString(navigator.language, { hour: '2-digit', minute: '2-digit' });
  return currentTime.toLowerCase();
}

// Uses chrome api to retrieve cookie name and value
function getCookie(cookieInfo = { domain: "", name: "" }) {

  if (cookieInfo.domain === "" && cookieInfo.name === "") return;

  var p = new Promise((resolve, reject) => {
    // Gets Cookies
    if (getBrowser() === "chrome") {
      chrome.cookies.getAll(cookieInfo, function (res) {
        // If cookie exists pass value into exists callback
        if (res.length > 0 && typeof res[0].value !== 'undefined') {
          var catFromCookie = JSON.stringify([res[0].value]);
          resolve(catFromCookie);
          // if(typeof exists === "function") exists(catFromCookie);
        }
        // If it doesn't call absent() callback
        else {
            resolve("");
            // if(typeof absent === "function") absent();
          }
      });
    }
    // Requires to be on same domain
    else {
        var name = cookieInfo.name + "=";
        var ca = document.cookie.split(';');
        var val;
        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            val = c.substring(name.length, c.length);
            resolve(val);
          }
        }
        val = "";
        resolve(val);
      }
  });

  return p;
}

function getParameterByName(name) {
  var match = RegExp('[?&]' + name + '=([^&]*)').exec(window.location.search);
  if (match !== null) {
    if (typeof match[1] !== "undefined") return decodeURIComponent(match[1].replace(/\+/g, ' '));
  }
}

function getBrowser() {
  var ua = window.navigator.userAgent || "";
  if (ua.indexOf("Chrome") > -1) {
    if (ua.indexOf("Edge") == -1) {
      return "chrome";
    } else {
      return "other";
    }
  } else if (ua.indexOf("Firefox") > -1) {
    return "firefox";
  } else if (ua.indexOf("MSIE 8.0") > -1) {

    return "ie8";
  } else {

    // Any other browser logic
    return "other";
  }
}

function setBrowserSetting(name, value) {
  var browser = getBrowser();
  var background, NTInstance;
  if (browser === "chrome" && typeof chrome.extension.getBackgroundPage() !== "undefined") {
    background = chrome.extension.getBackgroundPage();
    if (typeof background.NTInstance !== "undefined") {
      NTInstance = background.NTInstance;
      NTInstance.setSetting(name, value);
    }
  } else {
    localStorage.setItem(name, value);
  }
}
function getBrowserSetting(name, defValue) {
  var background, NTInstance;
  var browser = getBrowser();
  var settingVal;
  if (browser === "chrome" && typeof chrome.extension.getBackgroundPage() !== "undefined") {
    background = chrome.extension.getBackgroundPage();

    if (typeof background.NTInstance !== "undefined") {
      NTInstance = background.NTInstance;
      settingVal = NTInstance.getSetting(name, defValue);
    }
  } else {
    settingVal = localStorage.getItem(name);
    if (settingVal === null) settingVal = defValue;
  }
  return settingVal;
}

function jsonp(url, callback) {
  var callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());
  window[callbackName] = function (data) {
    delete window[callbackName];
    document.head.removeChild(script);
    callback(data);
  };

  var script = document.createElement('script');
  script.src = url + (url.indexOf('?') >= 0 ? '&' : '?') + 'callback=' + callbackName;
  document.head.appendChild(script);
}

function validateURL(url) {
  if (url.match(/(https?:\/\/)?([\da-z\.-]+)\.([a-z\.]{2,6})([\/\w \&\.\-]*)*\/?/) === null) {
    return false;
  } else return true;
}

function addHttp(url) {
  var newUrl;
  if (url.match(/^(https?:\/\/)/) === null) {
    var addHttp = "http://";
    newUrl = addHttp.concat(url);
    return newUrl;
  }
  return url;
};

/***/ }),

/***/ "./stylesheets/style.sass":
/*!********************************!*\
  !*** ./stylesheets/style.sass ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

// extracted by mini-css-extract-plugin

/***/ }),

/***/ 0:
/*!*****************************************************!*\
  !*** multi ./js/newtab.js ./stylesheets/style.sass ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./js/newtab.js */"./js/newtab.js");
module.exports = __webpack_require__(/*! ./stylesheets/style.sass */"./stylesheets/style.sass");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,